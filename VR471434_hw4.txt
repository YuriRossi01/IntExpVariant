####################Main.java####################

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

import java.io.IOException;
import java.io.InputStream;

public class Main {

    public static void main(String[] args) throws IOException {

        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        InputStream is = cl.getResourceAsStream(args[0]);
        CharStream cs = CharStreams.fromStream(is);

        IntExpLexer lexer = new IntExpLexer(cs);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        IntExpParser parser = new IntExpParser(tokens);

        ParseTree tree = parser.main();

        IntExp interpreter = new IntExp();
        System.out.println(interpreter.visit(tree));
    }
}







####################IntExp.java####################


import java.util.HashMap;
import java.util.Map;

public class IntExp extends IntExpBaseVisitor<Double> {
    private final Map<String, Double> memory = new HashMap<>();
    @Override
    public Double visitMain(IntExpParser.MainContext ctx) {
        return visit(ctx.prog());
    }
    @Override
    public Double visitProg(IntExpParser.ProgContext ctx) {
        visit(ctx.init());
        return visit(ctx.exp());
    }

    @Override
    public Double visitInit(IntExpParser.InitContext ctx) {
        for(int i = 0; i <ctx.exp().size(); i++) {
            String id = ctx.ID(i).getText();
            Double value = visit(ctx.exp(i));
            System.out.println("\t" + id + " = " + value);
            memory.put(id, value);
        }
        return null;
    }
    @Override
    public Double visitNum(IntExpParser.NumContext ctx) {
        return Double.parseDouble(ctx.FLOAT().getText());
    }

    @Override
    public Double visitId(IntExpParser.IdContext ctx) {
        return memory.getOrDefault(ctx.ID().getText(), 0.0);
    }

    @Override
    public Double visitPow(IntExpParser.PowContext ctx) {
        return  Math.pow(visit(ctx.exp(0)), visit(ctx.exp(1)));
    }

    @Override
    public Double visitMulDivMod(IntExpParser.MulDivModContext ctx) {
        return switch (ctx.op.getType()){
            case IntExpParser.DIV -> visit(ctx.exp(0)) / visit(ctx.exp(1));
            case IntExpParser.MOD -> visit(ctx.exp(0)) % visit(ctx.exp(1));
            case IntExpParser.MUL -> visit(ctx.exp(0)) * visit(ctx.exp(1));
            default -> null;
        };
    }

    @Override
    public Double visitPlusSub(IntExpParser.PlusSubContext ctx) {
        return switch (ctx.op.getType()){
            case IntExpParser.PLUS -> visit(ctx.exp(0)) + visit(ctx.exp(1));
            case IntExpParser.SUB -> visit(ctx.exp(0)) - visit(ctx.exp(1));
            default -> null;
        };
    }

    @Override
    public Double visitPar(IntExpParser.ParContext ctx) {
        return visit(ctx.exp());
    }
}







####################IntExp.g4####################
grammar IntExp;

main :  prog EOF ;
prog :  init exp ;

init : (ID EQUAL exp TERM )* ;

exp  : FLOAT                            # num
     | ID                               # id
     | <assoc = right> exp POW exp      # pow
     | exp op=(MUL | DIV | MOD) exp     # mulDivMod
     | exp op=(PLUS | SUB) exp          # plusSub
     | LPAR exp RPAR                    # par
;
LPAR : '(' ;
RPAR : ')' ;
PLUS : '+' ;
MUL  : '*' ;
SUB  : '-' ;
DIV  : '/' ;
POW  : '^' ;
MOD  : 'mod' ;
TERM : ';' ;
EQUAL : '=' ;


FLOAT : INT | (INT | '-' '0' ) '.' DIGIT + ;
fragment INT : NAT | '-' POS    ;
fragment NAT : '0' | POS        ;
fragment POS : POSDIGIT DIGIT * ;
fragment DIGIT : '0' | POSDIGIT ;
fragment POSDIGIT : [1-9]       ;

ID : [a-z]+ ;
WS   : [ \t\n\r]+ -> skip ;

